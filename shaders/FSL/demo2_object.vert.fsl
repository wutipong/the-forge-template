#include "demo2_resources.h.fsl"

STRUCT(VSInput)
{
	DATA(float4, Position, POSITION);
	DATA(float4, Normal,   NORMAL);
};

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_POSITION);
    DATA(float4, WorldPos, POSITION0);
	DATA(float4, Color,    COLOR);
    DATA(float4, Normal,   NORMAL);
    DATA(float4, ShadowMapPos, POSITION1);
    DATA(float2, ShadowMapCoord, TEXCOORD0);
    DATA(float4, ShadowMapCoordOffset1, TEXCOORD1);
    DATA(float4, ShadowMapCoordOffset2, TEXCOORD2);
    DATA(float4, ShadowMapCoordOffset3, TEXCOORD3);
    DATA(float4, ShadowMapCoordOffset4, TEXCOORD4);
};

STATIC const float2 ShadowMapOffset = float2(1/1024, 1/1024);

VSOutput VS_MAIN( VSInput In, SV_InstanceID(uint) InstanceID )
{
    INIT_MAIN;
    VSOutput Out;

#if VR_MULTIVIEW_ENABLED
    float4x4 tempMat = mul(Get(mvp)[VR_VIEW_ID], Get(toWorld));
#else
    float4x4 mWVP = mul(Get(mvp), Get(toWorld));
#endif
    Out.Position = mul(mWVP, float4(In.Position.xyz, 1.0f));

    float4x4 mShadowWVP = mul(Get(shadowMVP), Get(toWorld));
    Out.ShadowMapPos = mul(mShadowWVP,float4(In.Position.xyz, 1.0f));

    Out.Normal = normalize(mul(Get(toWorld), float4(In.Normal.xyz, 0.0f))); // Assume uniform scaling
    Out.WorldPos = mul(Get(toWorld), float4(In.Position.xyz, 1.0f));
    Out.Color = Get(color);

    Out.ShadowMapCoord = (1.0 + float2(Out.ShadowMapPos.x, -Out.ShadowMapPos.y))/2.0;

    Out.ShadowMapCoordOffset1 = mad(ShadowMapOffset.xyxy, float4(1.0, 0.0, -1.0, 0.0), Out.ShadowMapCoord.xyxy);
    Out.ShadowMapCoordOffset2 = mad(ShadowMapOffset.xyxy, float4(0.0, 1.0, 0.0, -1.0), Out.ShadowMapCoord.xyxy);
    Out.ShadowMapCoordOffset3 = mad(ShadowMapOffset.xyxy, float4(1.0, 1.0, -1.0, -1.0), Out.ShadowMapCoord.xyxy);
    Out.ShadowMapCoordOffset4 = mad(ShadowMapOffset.xyxy, float4(-1.0, 1.0, 1.0, -1.0), Out.ShadowMapCoord.xyxy);

    RETURN(Out);
}
