#ifndef MAX_PLANETS
    #define MAX_PLANETS 768
#endif
CBUFFER(uniformBlock, UPDATE_FREQ_PER_FRAME, b0, binding = 0)
{
#if VR_MULTIVIEW_ENABLED
    DATA(float4x4, mvp[VR_MULTIVIEW_COUNT], None);
#else
    DATA(float4x4, mvp, None);
#endif
    DATA(float4x4, toWorld[MAX_PLANETS], None);
    DATA(float4, color[MAX_PLANETS], None);

    // Point Light Information
    DATA(float3, lightPosition, None);
    DATA(float3, lightColor, None);
};

STRUCT(VSInput)
{
	DATA(float3, Position, POSITION);
	DATA(float3, Normal,   NORMAL);
};

STRUCT(VSOutput)
{
	DATA(float4, Position, SV_Position);
	DATA(float4, Color,    COLOR);
};

VSOutput VS_MAIN( VSInput In, SV_InstanceID(uint) InstanceID )
{
    INIT_MAIN;
    VSOutput Out;

#if VR_MULTIVIEW_ENABLED
    float4x4 tempMat = mul(Get(mvp)[VR_VIEW_ID], Get(toWorld)[InstanceID]);
#else
    float4x4 tempMat = mul(Get(mvp), Get(toWorld)[InstanceID]);
#endif
    Out.Position = mul(tempMat, float4(In.Position.xyz, 1.0f));

    float4 normal = normalize(mul(Get(toWorld)[InstanceID], float4(In.Normal.xyz, 0.0f))); // Assume uniform scaling
    float4 pos = mul(Get(toWorld)[InstanceID], float4(In.Position.xyz, 1.0f));

    float lightIntensity = 1.0f;
    // float quadraticCoeff = 1.2;
    float ambientCoeff = 0.1;

    float3 lightDir;

    if (Get(color)[InstanceID].w < 0.01) // Special case for Sun, so that it is lit from its top
        lightDir = float3(0.0f, 1.0f, 0.0f);
    else
        lightDir = normalize(Get(lightPosition) - pos.xyz);

    // float distance = length(lightDir);
    // float attenuation = 1.0 / (quadraticCoeff * distance * distance);
    // float intensity = lightIntensity * attenuation;

    float3 baseColor = Get(color)[InstanceID].xyz;
    float3 blendedColor = (Get(lightColor) * baseColor) * lightIntensity;
    float3 diffuse = blendedColor * max(dot(normal.xyz, lightDir), 0.0);
    float3 ambient = baseColor * ambientCoeff;
    Out.Color = float4(diffuse + ambient, 1.0);
    RETURN(Out);
}
