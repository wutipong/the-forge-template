#include "demo2_resources.h.fsl"

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float4, Color,    COLOR);
    DATA(float4, Normal,   NORMAL);
};

float3 doAmbientLight(float4 inColor, float4 aLight)
{
    float3 lightFactor = aLight.rgb * aLight.a;

    return inColor.rgb * lightFactor;
}

float3 doDirectionalLight(float4 inColor, float4 inNormal, float4 lightDirection, float4 lightColor)
{
    float factor = dot(normalize(inNormal.xyz), -normalize(lightDirection.xyz));
    if(factor < 0) return float3(0,0,0);

    return inColor.rgb * lightColor.rgb * (lightColor.a * factor);
}

float3 doPointLight(float4 inColor, float4 position, float4 inNormal, float4 lightPosition, float4 lightColor)
{
    float factor = dot(normalize(inNormal.xyz), normalize(position.xyz - lightPosition.xyz));
    float distant = length(dst(lightPosition, position));

    return inColor.rgb * lightColor.rgb * (lightColor.a * factor * distant);
}

float4 PS_MAIN( VSOutput In )
{
    INIT_MAIN;
    float4 Out = {0.0, 0.0, 0.0, 0.0};

    Out.rgb = doAmbientLight(In.Color, Get(ambientLight));

    int i = 0;
    for(i = 0; i < DIRECTIONAL_LIGHT_COUNT; i++)
    {
        Out.rgb += doDirectionalLight(
            In.Color, In.Normal,
            Get(directionalLightDirection[i]), Get(directionalLightColor[i])
            );
    }

    for(i = 0; i < POINT_LIGHT_COUNT; i++)
    {
        Out.rgb += doPointLight(
            In.Color, In.Position, In.Normal,
            Get(pointLightPosition[i]), Get(pointLightColor[i])
        );
    }

    Out.a = 1.0;

    RETURN(Out);
}